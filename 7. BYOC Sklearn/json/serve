#!/usr/bin/env python

from flask import Flask, Response, request
from io import StringIO
import pandas as pd
import numpy as np
import logging
import pickle
import json
import os


app = Flask(__name__)

MODEL_PATH = '/opt/ml/model'

# Singleton Class for holding the Model
class Predictor:
    model = None
    
    @classmethod
    def load_model(cls):
        print('[LOADING MODEL]')
        if cls.model is None:
            with open(os.path.join(MODEL_PATH, 'model.pkl'), 'rb') as file_:
                cls.model = pickle.load(file_)
        print('MODEL LOADED!')
        return cls.model
    
    @classmethod
    def predict(cls, X):
        X = X.reshape(1, -1)
        clf = cls.load_model()
        return clf.predict(X)

@app.route('/ping', methods=['GET'])
def ping():
    print('[HEALTH CHECK]')
    model = Predictor.load_model()
    status = 200
    if model is None:
        status = 404
    return Response(response={"HEALTH CHECK": "OK"}, status=status, mimetype='application/json')

@app.route('/invocations', methods=['POST'])
def invoke():
    data = None
    if request.content_type == 'application/json':
        data = request.data
        data = json.loads(data.decode('utf8'))
        features = data['instances']
        features = np.array(features)
    else:
        return Response(response='This Predictor only supports JSON data', status=415, mimetype='text/plain')

    prediction = Predictor.predict(features)    
    result = {'predictions': prediction.tolist()}
    result = json.dumps(result, indent=2).encode('utf-8')
    return Response(response=result, status=200, mimetype='application/json')

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=8080)
